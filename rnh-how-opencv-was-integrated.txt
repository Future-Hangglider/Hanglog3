TOOLS INSTALL
=============

This was my setup:
    Windows 8 x64
    Android Studio 3.1.4
    JDK [1.]8.241
    ANT 1.9.14
    opencv-3.4.1
    opencv_contrib-3.4.1

Android Studio was already installed

Download and install JDK from https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html (jdk-8u241-windows-x64.exe)
Let it install to default location (C:\Program Files\Java\jdk1.8.0_241)
Set JAVA_HOME as system environment variable to this path

Download and install ANT from http://ant.apache.org/bindownload.cgi (apache-ant-1.9.14-bin.zip)
Extract it into c:\Program Files (i.e. so c:\Program Files\apache-ant-1.9.14)
Set ANT_HOME as system environment variable to this path

Download and extract the OpenCV3.4.1 Android SDK and contrib from here:
    https://github.com/opencv/opencv/archive/3.4.1.zip
    https://github.com/opencv/opencv_contrib/archive/3.4.1.zip

Download and install Cmake installer from https://cmake.org/download/ (cmake-3.16.5-win64-x64.msi)
Install it, allow to add to path for all users and install to default C:\Program Files\CMake\

Download and install MinGW from http://www.mingw.org/download/installer, will download mingw-get-setup.exe (I received version 0.6.3-pre-20170905-1)
Run it and allow to install to default path (will take a little while to get going)
Tick mingw-developer-toolkit-bin (will select msys-base-bin at same time) as well as mingw32-gcc-g++-bin in addition to default mingw32-base-bin
Add c:\MinGW\bin to PATH

In Android Studio go to Tools>SDK Manager and select Android SDK 26.1.1 and NDK version 16.1.447499 (which is r16b)
Apply changes to install
Note the SDK location (I had c:\Users\Richard\Appdata\Local\Android\Sdk)
Set ANDROID_HOME in environment variables to this path
Set ANDROID_NDK to where NDK was installed (C:\Users\Richard\AppData\Local\Android\Sdk\ndk\16.1.4479499)

We need the "android" tool, so download that from http://dl-ssl.google.com/android/repository/tools_r25.2.5-windows.zip 
Overwrite the tools directory in the SDK (e.g. at C:\Users\Richard\AppData\Local\Android\Sdk)


PREPARE
=======
Create c:\projects\opencv341-android-sdk-with-contrib
Extract the downloaded opencv and opencv_contrib from previously to this directory
Remove the version number from folders, so simply named as so


COMPILE
=======
cmd
cd /d C:\Projects\opencv341-android-sdk-with-contrib\opencv
[md build the first time]
cd build
del CMakeCache.txt
cmake -G "MinGW Makefiles" -DCMAKE_TOOLCHAIN_FILE=C:\Projects\opencv341-android-sdk-with-contrib\opencv\platforms\android\android.toolchain.cmake -DOPENCV_EXTRA_MODULES_PATH=C:\Projects\opencv341-android-sdk-with-contrib\opencv_contrib\modules -DANDROID_ABI=armeabi-v7a -DANDROID_NATIVE_API_LEVEL=21 -DANDROID_SDK_TARGET=23 -DWITH_OPENCL=ON -DWITH_OPENCL_SVM=ON C:\Projects\opencv341-android-sdk-with-contrib\opencv

We now have a configured CMakeCache.txt, now to compile ...

mingw32-make -j5 (5 threads and executes the make command)

After successful completion we can install:

mingw32-make install

The SDK will be installed to C:\Projects\opencv341-android-sdk-with-contrib\opencv\build\install


INSTALL INTO HANGLOG3
=====================
git clone https://github.com/Future-Hangglider/Hanglog3.git into c:\projects[\Hanglog3]
git checkout checkout rnh
Create a folder c:\projects\Hanglog3\opencv-with-contrib
Copy contents of C:\Projects\opencv341-android-sdk-with-contrib\opencv\build\install into here

Open Android Studio and the project
Deleted any reference to opencv from settings.gradle and build.gradle
File > Project Structure > Project and change gradle version to 4.4 and to Android Plugin Version to 3.1.4
Save All
Sync All
Import anything missing

However, the above method creates static libraries; these seem to be linked in as per
https://stackoverflow.com/questions/34701003/android-studio-linking-opencv-static-libraries
This seems somewhat involved.

If we had dynamic libs we could do as per
https://stackoverflow.com/questions/17767557/how-to-use-opencv-in-using-gradle/27356635#27356635

Fortunately turns out don't need to do any of the above!


ALTERNATIVELY
=============
Simply add one of these into build.gradle! ...

dependencies {

  // opencv 3.4.1
  implementation 'com.quickbirdstudios:opencv:3.4.1'
  
  // opencv 3.4.4 with contribution packages
  implementation 'com.quickbirdstudios:opencv:3.4.4-contrib'
  
  // opencv 3.4.5
  implementation 'com.quickbirdstudios:opencv:3.4.5'
 
  // opencv 4.0.1
  implementation 'com.quickbirdstudios:opencv:4.0.1'
  
  // opencv 4.1.0
  implementation 'com.quickbirdstudios:opencv:4.1.0'
  
  // opencv 4.1.0 with contribution packages
  implementation 'com.quickbirdstudios:opencv:4.1.0-contrib'
}


R. Hunt
15/3/20